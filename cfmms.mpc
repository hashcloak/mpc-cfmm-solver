"""
[1]: https://angeris.github.io/papers/cfmm-routing.pdf
"""

from Compiler import mpc_math
"""
sfix.round_nearest = True
cfix.set_precision(f=16, k=40)
sfix.set_precision(f=16, k=40)

program.use_edabit(True)
program.use_split(4)
"""

class CFMM:
    """
    reserves: Matrix[sfix]
    gamma: sfix
    Ai: Array[regint]
    """
    def __init__(self, reserves, fee, Ai):
        self.R = reserves
        self.gamma = fee
        self.Ai = Ai

    def phi(self):  
        pass

    def gradient_phi(self):
        pass

    """
    tendered_baskets: Assets to give to CFMM. Delta in [1]
    received_baskets: Assets to receive from CFMM. Lambda in [1]
    """
    def find_arb(self, tendered_baskets, received_baskets, price_vector):
        pass
        

    """
    price_vector: Matrix[sfix]
    reserves: Matrix[sfix]
    invariant: sfix
    fee: sfix
    """
    def arb_delta(self, market_reference_price, reserve, invariant, fee):
        pass

    """
    price_vector: Matrix[sfix]
    reserves: Matrix[sfix]
    invariant: sfix
    fee: sfix
    """
    def arb_lambda(self, market_reference_price, reserve, invariant, fee):
        pass

    def zerotrade(self):
        zerotrade_list = sfix.Array(length=len(self.R))
        zerotrade_list.assign_all(sfix(0))
        return zerotrade_list

class ProductTwoCoinCFMM(CFMM):
    def __init__(self, reserves, fee, Ai):
        assert len(reserves) == 2
        assert len(Ai) == 2
        super().__init__(reserves, fee, Ai)

    def phi(self):
        #print(type(self.R[0][0] * self.R[1][0]))
        return self.R[0][0] * self.R[1][0]

    def gradient_phi(self):
        R_prime = Matrix(len(self.R), 1, sfix)
        R_prime[0][0] = self.R[0][1]
        R_prime[0][1]= self.R[0][0]
        return R_prime

    def find_arb(self, tendered_baskets, received_baskets, price_vector):
        assert len(price_vector) > 0
        is_gamma_nonneg = (self.gamma > 0).if_else(True, False)
        # Leaks whether gamma is nonnegative or not. Might not be good to leak this
        runtime_error_if(is_gamma_nonneg.reveal() == 0, "Gamma should be nonnegative")

        k = (self.gamma > 0).if_else(self.phi(), False)
        tendered_baskets[0] = (self.gamma > 0).if_else(self.arb_delta(price_vector[1][0]/price_vector[0][0], self.R[0][0], k, self.gamma), False)
        tendered_baskets[1] = (self.gamma > 0).if_else(self.arb_delta(price_vector[0][0]/price_vector[1][0], self.R[1][0], k, self.gamma), False)

        received_baskets[0] = (self.gamma > 0).if_else(self.arb_lambda(price_vector[0][0]/price_vector[1][0], self.R[0][0], k, self.gamma), False)
        received_baskets[1] = (self.gamma > 0).if_else(self.arb_lambda(price_vector[1][0]/price_vector[0][0], self.R[1][0], k, self.gamma), False)

        

    def arb_delta(self, market_reference_price, reserve, invariant, fee):
        return ((mpc_math.sqrt(fee*invariant*market_reference_price) - reserve).max(0))/fee

    def arb_lambda(self, market_reference_price, reserve, invariant, fee):
        return ((reserve - mpc_math.sqrt(invariant/(fee*market_reference_price))).max(0))

        

class GeometricMeanTwoCoinCFMM(CFMM):
    def __init__(self, reserves, weights, fee, Ai):
        assert len(reserves) == 2
        assert len(Ai) == 2
        assert len(weights) == 2
        self.reserves = reserves
        self.weights = weights
        self.fee = fee
        self.Ai = Ai
        super().__init__(reserves, fee, Ai)

    def phi(self):
        return (self.R[0]**self.weights[0]) * (self.R[1]**self.weights[1])

    def gradient_phi(self):
        R_prime = Matrix(len(self.R), 1, sfix)
        R_prime[0][0] = self.weights[0][0] * (self.R[0][1]/self.R[0][0])**self.weights[0][1]
        R_prime[1][0] = self.weights[1][0] * (self.R[0][0]/self.R[1][0])**self.weights[0][0]
        return R_prime

    def geom_arb_delta(self, market_reference_price, reserve1, reserve2, invariant, fee):
        return mpc_math.pow_fx(fee*market_reference_price*invariant*reserve1*mpc_math.pow_fx(reserve2, invariant), 1/(invariant+1)).max(0)/fee

    def geom_arb_lambda(self, market_reference_price, reserve1, reserve2, invariant, fee):
        return (reserve1-(reserve2*mpc_math.pow_fx(reserve1, 1/invariant))/mpc_math.pow_fx(invariant*fee*market_reference_price, invariant/(1+invariant))).max(0)

    def find_arb(self, tendered_baskets, received_baskets, price_vector):
        R = self.reserves
        fee = self.fee
        eta = self.weights[1][0]/self.weights[0][0]

        tendered_baskets[0] = self.geom_arb_delta(price_vector[1][0]/price_vector[0][0], R[1][0], R[0][0], eta, fee)
        tendered_baskets[1] = self.geom_arb_delta(price_vector[0][0]/price_vector[1][0], R[0][0], R[1][0], 1/eta, fee)

        received_baskets[0] = self.geom_arb_lambda(price_vector[0][0]/price_vector[1][0], R[0][0], R[1][0], 1/eta, fee)
        received_baskets[1] = self.geom_arb_lambda(price_vector[1][0]/price_vector[0][0], R[1][0], R[0][0], eta, fee)

        return (tendered_baskets, received_baskets)