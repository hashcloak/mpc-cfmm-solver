"""
[1]: https://angeris.github.io/papers/cfmm-routing.pdf
"""

from Compiler import mpc_math

class CFMM:
    """
    reserves: list[sfix]
    gamma: sfix
    Ai: list[int]
    """
    def __init__(self, reserves, fee, Ai):
        self.R = reserves
        self.gamma = fee
        self.Ai = Ai

    def phi(self):  
        pass

    def gradient_phi(self):
        pass

    """
    tendered_baskets: Assets to give to CFMM. Delta in [1]
    received_baskets: Assets to receive from CFMM. Lambda in [1]
    """
    def find_arb(self, tendered_baskets, received_baskets, price_vector):
        pass
        

    """
    price_vector: list[sfix]
    reservers: list[sfix]
    invariant: sfix
    fee: sfix
    """
    def arb_delta(self, market_reference_price, reserve, invariant, fee):
        pass

    """
    price_vector: list[sfix]
    reservers: list[sfix]
    invariant: sfix
    fee: sfix
    """
    def arb_lambda(self, market_reference_price, reserve, invariant, fee):
        pass

    def zerotrade(self):
        zerotrade_list = sfix.Array(length=len(self.R))
        zerotrade_list.assign_all(sfix(0))
        return zerotrade_list

class ProductTwoCoinCFMM(CFMM):
    def __init__(self, reserves, fee, Ai):
        assert len(reserves) == 2
        assert len(Ai) == 2
        super().__init__(reserves, fee, Ai)

    def phi(self):
        return self.R[0] * self.R[1]

    def gradient_phi(self):
        R_prime = sfix.Array(len(self.R))
        R_prime[0] = self.R[1]
        R_prime[1] = self.R[0]
        return R_prime

    def find_arb(self, tendered_baskets, received_baskets, price_vector):
        assert len(price_vector) > 0
        is_gamma_nonneg = (self.gamma > 0).if_else(True, False)
        # Leaks whether gamma is nonnegative or not. Might not be good to leak this
        runtime_error_if(is_gamma_nonneg.reveal() == 0, "Gamma should be nonnegative")

        k = (self.gamma > 0).if_else(self.phi(), False)
        tendered_baskets[0] = (self.gamma > 0).if_else(self.arb_delta(price_vector[1]/price_vector[0], self.R[0], k, self.gamma), False)
        tendered_baskets[1] = (self.gamma > 0).if_else(self.arb_delta(price_vector[0]/price_vector[1], self.R[1], k, self.gamma), False)

        received_baskets[0] = (self.gamma > 0).if_else(self.arb_lambda(price_vector[0]/price_vector[1], self.R[0], k, self.gamma), False)
        received_baskets[1] = (self.gamma > 0).if_else(self.arb_lambda(price_vector[1]/price_vector[0], self.R[1], k, self.gamma), False)

        # Can simply short circuit to k.reveal() == False
        # Leaving for learning + demonstration purposes
        @if_(((k + tendered_baskets[0] + tendered_baskets[1] + received_baskets[0] + received_baskets[1]) == 0).reveal())
        def _():
            runtime_error("gamma is not nonnegative")
        
        # return (tendered_baskets, received_baskets)

        

    def arb_delta(self, market_reference_price, reserve, invariant, fee):
        return ((mpc_math.sqrt(fee*invariant*market_reference_price) - reserve).max(0))/fee

    def arb_lambda(self, market_reference_price, reserve, invariant, fee):
        return ((reserve - mpc_math.sqrt(invariant/(fee*market_reference_price))).max(0))

        

class GeometricMeanTwoCoinCFMM(CFMM):
    def __init__(self, reserves, Ai, fee, weights):
        assert len(reserves) == 2
        assert len(Ai) == 2
        assert len(weights) == 2
        self.weights = weights
        super().__init__(reserves, fee, Ai)

    def phi(self):
        return (self.R[0]**self.weights[0]) * (self.R[1]**self.weights[1])

    def gradient_phi(self):
        R_prime = sfix.Array(len(self.R))
        R_prime[0] = self.weights[0] * (self.R[1]/self.R[0])**self.weights[1]
        R_prime[1] = self.weights[1] * (self.R[0]/self.R[1])**self.weights[0]
        return R_prime

    def geom_arb_delta(self, market_reference_price, reserve1, reserve2, invariant, fee):
        return mpc_math.pow(fee*market_reference_price*invariant*reserve1*mpc_math.pow(reserve2, invariant), 1/(invariant+1)).max(0)/fee

    def geom_arb_lambda(self, market_reference_price, reserve1, reserve2, invariant, fee):
        return (reserve1-(reserve2*mpc_math.pow(reserve1, 1/invariant))/mpc_math.pow(invariant*fee*market_reference_price, invariant/(1+invariant))).max(0)

    def find_arb(self, tendered_baskets, received_baskets, price_vector):
        R = self.reserves
        fee = self.fee
        eta = self.weights[1]/self.weights[0]

        tendered_baskets[0] = geom_arb_delta(price_vector[1]/price_vector[0], R[1], R[0], eta, fee)
        tendered_baskets[1] = geom_arb_delta(price_vector[0]/price_vector[1], R[0], R[1], 1/eta, fee)

        received_baskets[0] = geom_arb_lambda(price_vector[0]/price_vector[1], R[0], R[1], 1/eta, fee)
        received_baskets[1] = geom_arb_lambda(price_vector[1]/price_vector[0], R[1], R[0], eta, fee)

        return (tendered_baskets, received_baskets)

#if __name__ == '__main__':
    # Testing Classes

global_indices = regint.Array(2)
global_indices.assign([0, 1])

reserves_prod1 = sfix.Array(2)
reserves_prod1.assign([1000000, 1000000])
fee = sfix(1)
equal_pool = ProductTwoCoinCFMM(reserves_prod1, fee, global_indices)

reserves_prod2 = sfix.Array(2)
reserves_prod2.assign([1000, 2000])
unequal_small_pool = ProductTwoCoinCFMM(reserves_prod2, fee, global_indices)

reserves_prod3 = sfix.Array(2)
reserves_prod3.assign([10000, 20000])
weights = sfix.Array(2)
weights.assign([0.4, 0.6])
weighted_pool = GeometricMeanTwoCoinCFMM(reserves_prod3, weights, fee, global_indices)

price_vector = sfix.Array(2)
price_vector.assign([1, 1])
tendered_assets_tmp = sfix.Array(2)
tendered_assets_tmp.assign([0, 0])
received_assets_tmp = sfix.Array(2)
received_assets_tmp.assign([0, 0])
equal_pool.find_arb(tendered_assets_tmp, received_assets_tmp, price_vector)
tendered_assets_tmp.print_reveal_nested()
received_assets_tmp.print_reveal_nested()